[{"C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\index.js":"1","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\reportWebVitals.js":"2","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\App.js":"3","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\config\\firebase.js":"4","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\Routes.js":"5","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\pages\\BlendDetails.jsx":"6","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\pages\\OutTable.jsx":"7","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\pages\\ItemDetails.jsx":"8","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\pages\\Blends.jsx":"9","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\pages\\InTable.jsx":"10","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\components\\Item.jsx":"11","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\components\\Navbar.jsx":"12","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\components\\FAB.jsx":"13","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\pages\\AddItem.jsx":"14","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\components\\EditableText.jsx":"15","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\components\\Tables.jsx":"16","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\serviceWorkerRegistration.js":"17"},{"size":735,"mtime":1609082592540,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1607351174483,"results":"20","hashOfConfig":"19"},{"size":189,"mtime":1607525420835,"results":"21","hashOfConfig":"19"},{"size":513,"mtime":1607352525918,"results":"22","hashOfConfig":"19"},{"size":1163,"mtime":1609081931129,"results":"23","hashOfConfig":"19"},{"size":2145,"mtime":1609081842078,"results":"24","hashOfConfig":"19"},{"size":2898,"mtime":1607682016622,"results":"25","hashOfConfig":"19"},{"size":652,"mtime":1607678902609,"results":"26","hashOfConfig":"19"},{"size":1796,"mtime":1609081850018,"results":"27","hashOfConfig":"19"},{"size":2565,"mtime":1609065843277,"results":"28","hashOfConfig":"19"},{"size":1744,"mtime":1608907918949,"results":"29","hashOfConfig":"19"},{"size":1120,"mtime":1607527395032,"results":"30","hashOfConfig":"19"},{"size":597,"mtime":1608904731839,"results":"31","hashOfConfig":"19"},{"size":5317,"mtime":1609082134932,"results":"32","hashOfConfig":"19"},{"size":2546,"mtime":1608907432910,"results":"33","hashOfConfig":"34"},{"size":5950,"mtime":1609080408308,"results":"35","hashOfConfig":"19"},{"size":5064,"mtime":1609082574882,"results":"36","hashOfConfig":"19"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"9mr3bq",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"39"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"39"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"39"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"39"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},"1ar7ea2",{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"39"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\index.js",[],["80","81"],"C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\reportWebVitals.js",[],"C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\App.js",[],"C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\config\\firebase.js",[],"C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\Routes.js",[],"C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\pages\\BlendDetails.jsx",["82"],"import React, { Fragment } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { firestore } from \"../config/firebase\";\r\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\r\nimport {\r\n  CircularProgress,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nfunction BlendDetails(props) {\r\n  const { id } = useParams();\r\n  const classes = useStyles();\r\n  const parchiRef = firestore.collection(\"parchi\");\r\n  const query = parchiRef.where(\"cat\", \"==\", id).limit(25);\r\n\r\n  const [parchi, loading, error] = useCollectionData(query, { idField: \"id\" });\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"flex-container-center\">\r\n        Blend Details : {id}\r\n        <List component=\"nav\" className={classes.root}>\r\n          {error && <strong>Error: {JSON.stringify(error)}</strong>}\r\n          {loading && (\r\n            <div className=\"flex-container-center\">\r\n              <CircularProgress />\r\n            </div>\r\n          )}\r\n          {parchi &&\r\n            parchi.map((data, index) => (\r\n              <ItemCard key={data.id} data={data} index={index} />\r\n            ))}\r\n        </List>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst ItemCard = ({ data, index }) => {\r\n  return (\r\n    <ListItemLink\r\n      key={index}\r\n      to={`/blendetails/${data.id}`}\r\n      primary={data.date.toDate().toUTCString()}\r\n    />\r\n  );\r\n};\r\n\r\nexport default BlendDetails;\r\nfunction ListItemLink(props) {\r\n  const { icon, primary, to } = props;\r\n\r\n  const renderLink = React.useMemo(\r\n    () =>\r\n      React.forwardRef((itemProps, ref) => (\r\n        <RouterLink to={to} ref={ref} {...itemProps} />\r\n      )),\r\n    [to]\r\n  );\r\n\r\n  return (\r\n    <li>\r\n      <ListItem button component={renderLink}>\r\n        {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n        <ListItemText primary={primary} />\r\n      </ListItem>\r\n    </li>\r\n  );\r\n}\r\n","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\pages\\OutTable.jsx",["83","84"],"import React from \"react\";\r\nimport { useDocumentData } from \"react-firebase-hooks/firestore\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { firestore } from \"../config/firebase\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nfunction OutTable() {\r\n  const { id } = useParams();\r\n  const [details, loading, error] = useDocumentData(\r\n    firestore.doc(`parchi/${id}`),\r\n    { idField: \"id\" }\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {error && <strong>Error: {JSON.stringify(error)}</strong>}\r\n      {loading && <span>Collection: Loading...</span>}\r\n      {details && (\r\n        <div>\r\n          <DenseTable details={details} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles({});\r\n\r\nfunction createData(size, bag, weight, total) {\r\n  return { size, bag, weight, total };\r\n}\r\n\r\nfunction DenseTable({ details }) {\r\n  const classes = useStyles();\r\n  const rows = details.total_out.items;\r\n\r\n  return (\r\n    <>\r\n      <TableContainer\r\n        component={Paper}\r\n        style={{\r\n          textAlign: \"center\",\r\n          justifyContent: \"center\",\r\n          display: \"flex\",\r\n        }}\r\n      >\r\n        <Table\r\n          className={classes.table}\r\n          size=\"small\"\r\n          aria-label=\"a dense table\"\r\n        >\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Size</TableCell>\r\n              <TableCell align=\"center\">Bag</TableCell>\r\n              <TableCell align=\"center\">Weight</TableCell>\r\n              <TableCell align=\"center\">Total Kg</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row, index) => (\r\n              <TableRow key={index}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.size}\r\n                </TableCell>\r\n                <TableCell align=\"center\">{row.bags}</TableCell>\r\n                <TableCell align=\"center\">{row.weight}</TableCell>\r\n                <TableCell align=\"center\">{row.total_weight}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n            <TableRow>\r\n              <TableCell></TableCell>\r\n              <TableCell></TableCell>\r\n              <TableCell align=\"center\">\r\n                <b>Total : </b>\r\n              </TableCell>\r\n              <TableCell align=\"center\">\r\n                <b>{details.total_out.value}</b>\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default OutTable;\r\n","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\pages\\ItemDetails.jsx",[],"C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\pages\\Blends.jsx",[],"C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\pages\\InTable.jsx",["85"],"import React from \"react\";\r\nimport { useDocumentData } from \"react-firebase-hooks/firestore\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { firestore } from \"../config/firebase\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nfunction InTable() {\r\n  const { id } = useParams();\r\n  const [details, loading, error] = useDocumentData(\r\n    firestore.doc(`parchi/${id}`),\r\n    { idField: \"id\" }\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {error && <strong>Error: {JSON.stringify(error)}</strong>}\r\n      {loading && <span>Collection: Loading...</span>}\r\n      {details && (\r\n        <div>\r\n          <DenseTable details={details} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InTable;\r\n\r\nconst useStyles = makeStyles({});\r\n\r\nfunction createData(bag, weight, total) {\r\n  return { bag, weight, total };\r\n}\r\n\r\nfunction DenseTable({ details }) {\r\n  const classes = useStyles();\r\n  const rows = details.total_in.items;\r\n  console.log(rows);\r\n\r\n  return (\r\n    <TableContainer\r\n      component={Paper}\r\n      style={{ textAlign: \"center\", justifyContent: \"center\", display: \"flex\" }}\r\n    >\r\n      <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Bag</TableCell>\r\n            <TableCell align=\"center\">Weight</TableCell>\r\n            <TableCell align=\"center\">Total Kg</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row, index) => (\r\n            <TableRow key={index}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.bags}\r\n              </TableCell>\r\n              <TableCell align=\"center\">{row.weight}</TableCell>\r\n              <TableCell align=\"center\">{row.total_weight}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n          <TableRow>\r\n            <TableCell></TableCell>\r\n            <TableCell align=\"center\">\r\n              <b>Total : </b>\r\n            </TableCell>\r\n            <TableCell align=\"center\">\r\n              <b>{details.total_in.value}</b>\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\components\\Item.jsx",[],["86","87"],"C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\components\\Navbar.jsx",[],"C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\components\\FAB.jsx",[],"C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\pages\\AddItem.jsx",["88","89"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  CircularProgress,\r\n  Container,\r\n  FormControl,\r\n  InputLabel,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  makeStyles,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { firestore } from \"../config/firebase\";\r\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\r\nimport Tables from \"../components/Tables\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\nconst categories = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"];\r\n\r\nfunction AddItem() {\r\n  const [previousRem, setPreviousRem] = useState(0);\r\n  const [totalIn, setTotalIn] = useState(0);\r\n  const [totalOut, setTotalOut] = useState(0);\r\n  const [total, setTotal] = useState(0);\r\n  const [rem, setRem] = useState(0);\r\n  const [spinner, setSpinner] = useState(false);\r\n  const [tableDataIn, setTableDataIn] = useState([]);\r\n  const [tableDataOut, setTableDataOut] = useState([]);\r\n  const [cat, setCat] = useState(\"A\");\r\n\r\n  const classes = useStyles();\r\n  const parchiRef = firestore.collection(\"parchi\");\r\n\r\n  const query = parchiRef.where(\"cat\", \"==\", cat).limit(25);\r\n  const [parchi, loading, error] = useCollectionData(query, { idField: \"id\" });\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (!loading && !error && parchi[1]) setPreviousRem(parchi[1].rem);\r\n  }, [parchi, cat]);\r\n\r\n  useEffect(() => {\r\n    setTotal(parseFloat(previousRem) + parseFloat(totalIn));\r\n    setRem(\r\n      parseFloat(previousRem) + parseFloat(totalIn) - parseFloat(totalOut)\r\n    );\r\n  }, [totalIn, totalOut, previousRem, total, rem]);\r\n\r\n  const saveItem = async () => {\r\n    const item = {\r\n      cat: cat,\r\n      date: new Date(),\r\n      previous_rem: previousRem,\r\n      rem: rem,\r\n      total: total,\r\n      total_in: { value: totalIn, items: tableDataIn },\r\n      total_out: { value: totalOut, items: tableDataOut },\r\n    };\r\n    setSpinner(true);\r\n    await firestore.collection(\"parchi\").add(item);\r\n    setSpinner(false);\r\n    history.push(`/blends/${cat}`);\r\n  };\r\n\r\n  if (spinner || loading) {\r\n    return (\r\n      <div className=\"flex-container-center\">\r\n        <CircularProgress />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {error && <p>An Error Occured</p>}\r\n      <List component=\"nav\" className={classes.root}>\r\n        <ListItem button>\r\n          <FormControl style={{ minWidth: 240 }}>\r\n            <InputLabel id=\"demo-simple-select-label\">Category</InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-label\"\r\n              id=\"demo-simple-select\"\r\n              value={cat}\r\n              onChange={(event) => setCat(event.target.value)}\r\n            >\r\n              {categories.map((item) => (\r\n                <MenuItem value={item}>{item}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </ListItem>\r\n        <ListItem button>\r\n          <ListItemText primary={`${new Date().toDateString()}`} />\r\n        </ListItem>\r\n        <ListItem button>\r\n          <ListItemText primary={`मा. शिल्लक :`} />\r\n          {!loading && !error && (\r\n            <TextField\r\n              inputProps={{ min: 0, style: { textAlign: \"right\" } }}\r\n              value={previousRem}\r\n              style={{ width: \"50%\", textAlign: \"right\" }}\r\n              name=\"previousRem\"\r\n              onChange={(e) => setPreviousRem(e.target.value)}\r\n            />\r\n          )}\r\n        </ListItem>\r\n        <br />\r\n        <ListItem>\r\n          <ListItemText primary={`दिला :`} />\r\n          <Typography id=\"standard\" value={totalIn} name=\"totalIn\">\r\n            {totalIn} Kg\r\n          </Typography>\r\n        </ListItem>\r\n        <Tables\r\n          total={totalIn}\r\n          setTotal={setTotalIn}\r\n          tableDataIn={tableDataIn}\r\n          setTableDataIn={setTableDataIn}\r\n        />\r\n        <br />\r\n        <ListItem>\r\n          <ListItemText primary={`एकूण :`} />\r\n          <Typography style={{ margin: 5 }} name=\"total\">\r\n            {isNaN(total) ? 0 : total} Kg\r\n          </Typography>\r\n        </ListItem>\r\n        <br />\r\n        <ListItem>\r\n          <ListItemText primary={`जावक :`} />\r\n          <Typography style={{ margin: 5 }} name=\"totalOut\">\r\n            {totalOut} Kg\r\n          </Typography>\r\n        </ListItem>\r\n        <Tables\r\n          type={1}\r\n          total={totalOut}\r\n          setTotal={setTotalOut}\r\n          tableDataIn={tableDataOut}\r\n          setTableDataIn={setTableDataOut}\r\n        />\r\n        <br />\r\n        <ListItem button>\r\n          <ListItemText primary={`शिल्लक :`} />\r\n          <Typography style={{ margin: 5 }} name=\"rem\">\r\n            {isNaN(rem) ? 0 : rem}\r\n          </Typography>\r\n        </ListItem>\r\n        <br />\r\n        <br />\r\n      </List>\r\n      <Container style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <Button\r\n          style={{ backgroundColor: \"#4caf50\", color: \"white\" }}\r\n          onClick={saveItem}\r\n        >\r\n          Save\r\n        </Button>\r\n      </Container>\r\n      <br />\r\n      <br />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddItem;\r\n","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\components\\EditableText.jsx",["90","91","92"],"import React from \"react\";\r\n\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\n\r\nconst styles = (theme) => ({\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    padding: 50,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing.unit,\r\n    marginRight: theme.spacing.unit,\r\n    width: 300,\r\n    color: \"black\",\r\n    fontSize: 30,\r\n    opacity: 1,\r\n    borderBottom: 0,\r\n    \"&:before\": {\r\n      borderBottom: 0,\r\n    },\r\n  },\r\n  disabled: {\r\n    color: \"black\",\r\n    borderBottom: 0,\r\n    \"&:before\": {\r\n      borderBottom: 0,\r\n    },\r\n  },\r\n  btnIcons: {\r\n    marginLeft: 10,\r\n  },\r\n});\r\n\r\nclass EditableTextField extends React.Component {\r\n  state = {\r\n    email: \"johndoe@domain.com\",\r\n    editMode: false,\r\n    mouseOver: false,\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  handleMouseOver = (event) => {\r\n    if (!this.state.mouseOver) {\r\n      this.setState({ mouseOver: true });\r\n    }\r\n  };\r\n\r\n  handleMouseOut = (event) => {\r\n    // The problem is here!!!\r\n    if (this.state.mouseOver) {\r\n      this.setState({ mouseOver: false });\r\n    }\r\n  };\r\n\r\n  handleClick = () => {\r\n    this.setState({\r\n      editMode: true,\r\n      mouseOver: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { classes, value } = this.props;\r\n\r\n    return (\r\n      <div className={classes.container}>\r\n        <TextField\r\n          name=\"email\"\r\n          margin=\"normal\"\r\n          error={this.state.email === \"\"}\r\n          onChange={this.handleChange}\r\n          disabled={!this.state.editMode}\r\n          className={classes.textField}\r\n          onMouseEnter={this.handleMouseOver}\r\n          onMouseLeave={this.handleMouseOut}\r\n          InputProps={{\r\n            classes: {\r\n              disabled: classes.disabled,\r\n            },\r\n            endAdornment: this.state.mouseOver ? (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton onClick={this.handleClick}>\r\n                  <Edit />\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ) : (\r\n              \"\"\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(EditableTextField);\r\n",["93","94"],"C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\components\\Tables.jsx",["95","96","97","98"],"import {\r\n  Button,\r\n  Container,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Paper,\r\n  Select,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n} from \"@material-ui/core\";\r\nimport React, { Fragment, useEffect, useState } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\n\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\r\n\r\nfunction Tables({ type, total, setTotal, tableDataIn, setTableDataIn }) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [bags, setBags] = useState(0);\r\n  const [size, setSize] = useState(\"\");\r\n  const [weight, setWeight] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let total = 0;\r\n    if (!tableDataIn) return;\r\n    tableDataIn.map((item) => {\r\n      total += item.total_weight;\r\n    });\r\n    setTotal(total);\r\n  }, [tableDataIn]);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const deleteTableRow = (id) => {\r\n    const newTable = tableDataIn.filter((item) => item.id !== id);\r\n    setTableDataIn(newTable);\r\n  };\r\n\r\n  const addData = () => {\r\n    if (type) {\r\n      setTableDataIn(() => [\r\n        ...tableDataIn,\r\n        {\r\n          size: size,\r\n          bags: bags,\r\n          weight: weight,\r\n          total_weight: bags * weight,\r\n          id: new Date().toString(),\r\n        },\r\n      ]);\r\n    } else {\r\n      setTableDataIn(() => [\r\n        ...tableDataIn,\r\n        {\r\n          bags: bags,\r\n          weight: weight,\r\n          total_weight: bags * weight,\r\n          id: new Date().toString(),\r\n        },\r\n      ]);\r\n    }\r\n\r\n    setOpen(false);\r\n    setBags(0);\r\n    setWeight(0);\r\n    setSize(\"\");\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <TableContainer\r\n        style={{\r\n          textAlign: \"center\",\r\n          justifyContent: \"center\",\r\n          display: \"flex\",\r\n          borderTop: \"1px solid #505050\",\r\n          borderBottom: \"1px solid #505050\",\r\n        }}\r\n      >\r\n        <Table size=\"small\">\r\n          <TableHead>\r\n            <TableRow>\r\n              {type && <TableCell align=\"center\">Size</TableCell>}\r\n              <TableCell>Bag</TableCell>\r\n              <TableCell align=\"center\">Weight</TableCell>\r\n              <TableCell align=\"center\">Total </TableCell>\r\n              <TableCell align=\"center\">\r\n                <AddCircleIcon\r\n                  style={{ fill: \"#4caf50\" }}\r\n                  onClick={handleClickOpen}\r\n                />\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {tableDataIn &&\r\n              tableDataIn.map((row, index) => (\r\n                <TableRow key={index}>\r\n                  {type && (\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {row.size}\r\n                    </TableCell>\r\n                  )}\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {row.bags}\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">{row.weight}</TableCell>\r\n                  <TableCell align=\"center\">{row.total_weight}</TableCell>\r\n                  <TableCell align=\"center\">\r\n                    <RemoveCircleIcon\r\n                      color=\"error\"\r\n                      onClick={() => {\r\n                        deleteTableRow(row.id);\r\n                      }}\r\n                    />\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            <TableRow>\r\n              <TableCell></TableCell>\r\n\r\n              <TableCell align=\"center\">\r\n                <b>Total: </b>\r\n              </TableCell>\r\n              <TableCell align=\"center\">\r\n                <b>{total.toFixed(2)} </b>\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogContent>\r\n          {type && (\r\n            <FormControl style={{ minWidth: 120 }}>\r\n              <InputLabel id=\"demo-simple-select-label\">Size</InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"demo-simple-select\"\r\n                value={size}\r\n                onChange={(event) => setSize(event.target.value)}\r\n              >\r\n                <MenuItem value={\"10Rs\"}>10Rs</MenuItem>\r\n                <MenuItem value={\"20Rs\"}>20Rs</MenuItem>\r\n                <MenuItem value={\"100Gm\"}>100Gm</MenuItem>\r\n                <MenuItem value={\"250Gm\"}>250Gm</MenuItem>\r\n                <MenuItem value={\"500Gm\"}>500Gm</MenuItem>\r\n                <MenuItem value={\"1Kg\"}>1Kg</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          )}\r\n          <br />\r\n          <TextField\r\n            autoFocus={!type}\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label=\"Bag\"\r\n            type=\"text\"\r\n            value={bags ? bags : \"\"}\r\n            onChange={(event) => setBags(event.target.value)}\r\n          />\r\n          <TextField\r\n            margin=\"dense\"\r\n            id=\"weight\"\r\n            label=\"Weight (Kg)\"\r\n            type=\"text\"\r\n            value={weight ? weight : \"\"}\r\n            onChange={(event) => setWeight(event.target.value)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\" size=\"small\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={addData} color=\"primary\" size=\"small\">\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Tables;\r\n","C:\\Users\\skukr\\Desktop\\Navrang Projects\\navrang-pwa\\src\\serviceWorkerRegistration.js",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":2,"column":10,"nodeType":"105","messageId":"106","endLine":2,"endColumn":14},{"ruleId":"103","severity":1,"message":"107","line":12,"column":22,"nodeType":"105","messageId":"106","endLine":12,"endColumn":32},{"ruleId":"103","severity":1,"message":"108","line":36,"column":10,"nodeType":"105","messageId":"106","endLine":36,"endColumn":20},{"ruleId":"103","severity":1,"message":"108","line":38,"column":10,"nodeType":"105","messageId":"106","endLine":38,"endColumn":20},{"ruleId":"99","replacedBy":"109"},{"ruleId":"101","replacedBy":"110"},{"ruleId":"103","severity":1,"message":"111","line":2,"column":22,"nodeType":"105","messageId":"106","endLine":2,"endColumn":31},{"ruleId":"112","severity":1,"message":"113","line":51,"column":6,"nodeType":"114","endLine":51,"endColumn":19,"suggestions":"115"},{"ruleId":"103","severity":1,"message":"116","line":4,"column":8,"nodeType":"105","messageId":"106","endLine":4,"endColumn":16},{"ruleId":"103","severity":1,"message":"117","line":6,"column":8,"nodeType":"105","messageId":"106","endLine":6,"endColumn":13},{"ruleId":"103","severity":1,"message":"118","line":73,"column":22,"nodeType":"105","messageId":"106","endLine":73,"endColumn":27},{"ruleId":"99","replacedBy":"119"},{"ruleId":"101","replacedBy":"120"},{"ruleId":"103","severity":1,"message":"121","line":3,"column":3,"nodeType":"105","messageId":"106","endLine":3,"endColumn":12},{"ruleId":"103","severity":1,"message":"122","line":7,"column":3,"nodeType":"105","messageId":"106","endLine":7,"endColumn":8},{"ruleId":"123","severity":1,"message":"124","line":34,"column":28,"nodeType":"125","messageId":"126","endLine":34,"endColumn":30},{"ruleId":"112","severity":1,"message":"127","line":38,"column":6,"nodeType":"114","endLine":38,"endColumn":19,"suggestions":"128"},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Typography' is defined but never used.","'createData' is defined but never used.",["129"],["130"],"'useParams' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'error' and 'loading'. Either include them or remove the dependency array.","ArrayExpression",["131"],"'MenuItem' is defined but never used.","'Input' is defined but never used.","'value' is assigned a value but never used.",["129"],["130"],"'Container' is defined but never used.","'Paper' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'setTotal'. Either include it or remove the dependency array. If 'setTotal' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["132"],"no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},"Update the dependencies array to be: [parchi, cat, loading, error]",{"range":"137","text":"138"},"Update the dependencies array to be: [setTotal, tableDataIn]",{"range":"139","text":"140"},[1537,1550],"[parchi, cat, loading, error]",[1058,1071],"[setTotal, tableDataIn]"]